{"/home/travis/build/npmtest/node-npmtest-email-verification/test.js":"/* istanbul instrument in package npmtest_email_verification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email-verification/lib.npmtest_email_verification.js":"/* istanbul instrument in package npmtest_email_verification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_email_verification = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_email_verification = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-email-verification/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-email-verification && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_email_verification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_email_verification\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_email_verification.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_email_verification.rollup.js'] =\n            local.assetsDict['/assets.npmtest_email_verification.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_email_verification.__dirname + '/lib.npmtest_email_verification.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email-verification/node_modules/email-verification/index.js":"'use strict';\n\nvar randtoken = require('rand-token'),\n  nodemailer = require('nodemailer');\n\nmodule.exports = function(mongoose) {\n\n  var isPositiveInteger = function(x) {\n    return ((parseInt(x, 10) === x) && (x >= 0));\n  };\n\n  var createOptionError = function(optionName, optionValue, expectedType) {\n    return new TypeError('Expected ' + optionName + ' to be a ' + expectedType + ', got ' +\n      typeof optionValue);\n  };\n\n  /**\n   * Retrieve a nested value of an object given a string, using dot notation.\n   *\n   * @func getNestedValue\n   * @param {object} obj - object to retrieve the value from\n   * @param {string} path - path to value\n   * @param {string} def - default value to return if not found\n   */\n  var getNestedValue = function(obj, path, def) {\n    path = path.split('.');\n    for (let i = 0, len = path.length; i < len; i++) {\n      if (!obj || typeof obj !== 'object') {\n        return def;\n      }\n      obj = obj[path[i]];\n    }\n\n    if (obj === undefined) {\n      return def;\n    }\n    return obj;\n  };\n\n\n  // default options\n  var options = {\n    verificationURL: 'http://example.com/email-verification/${URL}',\n    URLLength: 48,\n\n    // mongo-stuff\n    persistentUserModel: null,\n    tempUserModel: null,\n    tempUserCollection: 'temporary_users',\n    emailFieldName: 'email',\n    passwordFieldName: 'password',\n    URLFieldName: 'GENERATED_VERIFYING_URL',\n    expirationTime: 86400,\n\n    // emailing options\n    transportOptions: {\n      service: 'Gmail',\n      auth: {\n        user: 'user@gmail.com',\n        pass: 'password'\n      }\n    },\n    verifyMailOptions: {\n      from: 'Do Not Reply <user@gmail.com>',\n      subject: 'Confirm your account',\n      html: '<p>Please verify your account by clicking <a href=\"${URL}\">this link</a>. If you are unable to do so, copy and ' +\n        'paste the following link into your browser:</p><p>${URL}</p>',\n      text: 'Please verify your account by clicking the following link, or by copying and pasting it into your browser: ${URL}'\n    },\n    verifySendMailCallback: function(err, info) {\n      if (err) {\n        throw err;\n      } else {\n        console.log(info.response);\n      }\n    },\n    shouldSendConfirmation: true,\n    confirmMailOptions: {\n      from: 'Do Not Reply <user@gmail.com>',\n      subject: 'Successfully verified!',\n      html: '<p>Your account has been successfully verified.</p>',\n      text: 'Your account has been successfully verified.'\n    },\n    confirmSendMailCallback: function(err, info) {\n      if (err) {\n        throw err;\n      } else {\n        console.log(info.response);\n      }\n    },\n    hashingFunction: null,\n  };\n\n\n  var transporter;\n\n  /**\n   * Modify the default configuration.\n   *\n   * @func configure\n   * @param {object} o - options to be changed\n   */\n  var configure = function(optionsToConfigure, callback) {\n    for (let key in optionsToConfigure) {\n      if (optionsToConfigure.hasOwnProperty(key)) {\n        options[key] = optionsToConfigure[key];\n      }\n    }\n    transporter = nodemailer.createTransport(options.transportOptions);\n\n    var err;\n\n    if (typeof options.verificationURL !== 'string') {\n      err = err || createOptionError('verificationURL', options.verificationURL, 'string');\n    } else if (options.verificationURL.indexOf('${URL}') === -1) {\n      err = err || new Error('Verification URL does not contain ${URL}');\n    }\n\n    if (typeof options.URLLength !== 'number') {\n      err = err || createOptionError('URLLength', options.URLLength, 'number');\n    } else if (!isPositiveInteger(options.URLLength)) {\n      err = err || new Error('URLLength must be a positive integer');\n    }\n\n    if (typeof options.tempUserCollection !== 'string') {\n      err = err || createOptionError('tempUserCollection', options.tempUserCollection, 'string');\n    }\n\n    if (typeof options.emailFieldName !== 'string') {\n      err = err || createOptionError('emailFieldName', options.emailFieldName, 'string');\n    }\n\n    if (typeof options.passwordFieldName !== 'string') {\n      err = err || createOptionError('passwordFieldName', options.passwordFieldName, 'string');\n    }\n\n    if (typeof options.URLFieldName !== 'string') {\n      err = err || createOptionError('URLFieldName', options.URLFieldName, 'string');\n    }\n\n    if (typeof options.expirationTime !== 'number') {\n      err = err || createOptionError('expirationTime', options.expirationTime, 'number');\n    } else if (!isPositiveInteger(options.expirationTime)) {\n      err = err || new Error('expirationTime must be a positive integer');\n    }\n\n    if (err) {\n      return callback(err, null);\n    }\n\n    return callback(null, options);\n  };\n\n\n  /**\n   * Create a Mongoose Model for the temporary user, based off of the persistent\n   * User model, i.e. the temporary user inherits the persistent user. An\n   * additional field for the URL is created, as well as a TTL.\n   *\n   * @func generateTempUserModel\n   * @param {object} User - the persistent User model.\n   * @return {object} the temporary user model\n   */\n  var generateTempUserModel = function(User, callback) {\n    if (!User) {\n      return callback(new TypeError('Persistent user model undefined.'), null);\n    }\n    var tempUserSchemaObject = {}, // a copy of the schema\n      tempUserSchema;\n\n    // copy over the attributes of the schema\n    Object.keys(User.schema.paths).forEach(function(field) {\n      tempUserSchemaObject[field] = User.schema.paths[field].options;\n    });\n    tempUserSchemaObject[options.URLFieldName] = String;\n\n    // create a TTL\n    tempUserSchemaObject.createdAt = {\n      type: Date,\n      expires: options.expirationTime.toString() + 's',\n      default: Date.now\n    };\n\n    tempUserSchema = mongoose.Schema(tempUserSchemaObject);\n\n    // copy over the methods of the schema\n    Object.keys(User.schema.methods).forEach(function(meth) { // tread lightly\n      tempUserSchema.methods[meth] = User.schema.methods[meth];\n    });\n\n    options.tempUserModel = mongoose.model(options.tempUserCollection, tempUserSchema);\n\n    return callback(null, mongoose.model(options.tempUserCollection));\n  };\n\n\n  /**\n   * Helper function for actually inserting the temporary user into the database.\n   *\n   * @func insertTempUser\n   * @param {string} password - the user's password, possibly hashed\n   * @param {object} tempUserData - the temporary user's data\n   * @param {function} callback - a callback function, which takes an error and the\n   *   temporary user object as params\n   * @return {function} returns the callback function\n   */\n  var insertTempUser = function(password, tempUserData, callback) {\n    // password may or may not be hashed\n    tempUserData[options.passwordFieldName] = password;\n    var newTempUser = new options.tempUserModel(tempUserData);\n\n    newTempUser.save(function(err, tempUser) {\n      if (err) {\n        return callback(err, null, null);\n      }\n      return callback(null, null, tempUser);\n    });\n  };\n\n\n  /**\n   * Attempt to create an instance of a temporary user based off of an instance of a\n   * persistent user. If user already exists in the temporary collection, passes null\n   * to the callback function; otherwise, passes the instance to the callback, with a\n   * randomly generated URL associated to it.\n   *\n   * @func createTempUser\n   * @param {object} user - an instance of the persistent User model\n   * @param {function} callback - a callback function that takes an error (if one exists),\n   *   a persistent user (if it exists) and the new temporary user as arguments; if the\n   *   temporary user already exists, then null is returned in its place\n   * @return {function} returns the callback function\n   */\n  var createTempUser = function(user, callback) {\n    if (!options.tempUserModel) {\n      return callback(new TypeError('Temporary user model not defined. Either you forgot' +\n        'to generate one or you did not predefine one.'), null);\n    }\n\n    // create our mongoose query\n    var query = {};\n\n    if(options.emailFieldName.split('.').length > 1){\n      var levels = options.emailFieldName.split('.');\n      query[levels[0]] = {};\n\n      var queryObj = query[levels[0]];\n      var userObj = user[levels[0]];\n      for(var i=0; i<levels.length; i++){\n        queryObj[levels[i+1]] = {};\n        queryObj = queryObj[levels[i+1]];\n        userObj = userObj[levels[i+1]];\n      }\n\n      queryObj = userObj;\n    }else {\n      query[options.emailFieldName] = user[options.emailFieldName];\n    }\n\n    options.persistentUserModel.findOne(query, function(err, existingPersistentUser) {\n      if (err) {\n        return callback(err, null, null);\n      }\n\n      // user has already signed up and confirmed their account\n      if (existingPersistentUser) {\n        return callback(null, existingPersistentUser, null);\n      }\n\n      options.tempUserModel.findOne(query, function(err, existingTempUser) {\n        if (err) {\n          return callback(err, null, null);\n        }\n\n        // user has already signed up but not yet confirmed their account\n        if (existingTempUser) {\n          return callback(null, null, null);\n        } else {\n          var tempUserData = {};\n\n          // copy the credentials for the user\n          Object.keys(user._doc).forEach(function(field) {\n            tempUserData[field] = user[field];\n          });\n\n          tempUserData[options.URLFieldName] = randtoken.generate(options.URLLength);\n\n          if (options.hashingFunction) {\n            return options.hashingFunction(tempUserData[options.passwordFieldName], tempUserData,\n              insertTempUser, callback);\n          } else {\n            return insertTempUser(tempUserData[options.passwordFieldName], tempUserData, callback);\n          }\n        }\n      });\n    });\n  };\n\n\n  /**\n   * Send an email to the user requesting confirmation.\n   *\n   * @func sendVerificationEmail\n   * @param {string} email - the user's email address.\n   * @param {string} url - the unique url generated for the user.\n   * @param {function} callback - the callback to pass to Nodemailer's transporter\n   */\n  var sendVerificationEmail = function(email, url, callback) {\n    var r = /\\$\\{URL\\}/g;\n\n    // inject newly-created URL into the email's body and FIRE\n    // stringify --> parse is used to deep copy\n    var URL = options.verificationURL.replace(r, url),\n      mailOptions = JSON.parse(JSON.stringify(options.verifyMailOptions));\n\n    mailOptions.to = email;\n    mailOptions.html = mailOptions.html.replace(r, URL);\n    mailOptions.text = mailOptions.text.replace(r, URL);\n\n    if (!callback) {\n      callback = options.verifySendMailCallback;\n    }\n    transporter.sendMail(mailOptions, callback);\n  };\n\n  /**\n   * Send an email to the user requesting confirmation.\n   *\n   * @func sendConfirmationEmail\n   * @param {string} email - the user's email address.\n   * @param {function} callback - the callback to pass to Nodemailer's transporter\n   */\n  var sendConfirmationEmail = function(email, callback) {\n    var mailOptions = JSON.parse(JSON.stringify(options.confirmMailOptions));\n    mailOptions.to = email;\n    if (!callback) {\n      callback = options.confirmSendMailCallback;\n    }\n    transporter.sendMail(mailOptions, callback);\n  };\n\n  /**\n   * Transfer a temporary user from the temporary collection to the persistent\n   * user collection, removing the URL assigned to it.\n   *\n   * @func confirmTempUser\n   * @param {string} url - the randomly generated URL assigned to a unique email\n   */\n  var confirmTempUser = function(url, callback) {\n    var TempUser = options.tempUserModel,\n      query = {};\n    query[options.URLFieldName] = url;\n\n    TempUser.findOne(query, function(err, tempUserData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      // temp user is found (i.e. user accessed URL before their data expired)\n      if (tempUserData) {\n        var userData = JSON.parse(JSON.stringify(tempUserData)), // copy data\n          User = options.persistentUserModel,\n          user;\n\n        delete userData[options.URLFieldName];\n        user = new User(userData);\n\n        // save the temporary user to the persistent user collection\n        user.save(function(err, savedUser) {\n          if (err) {\n            return callback(err, null);\n          }\n\n          TempUser.remove(query, function(err) {\n            if (err) {\n              return callback(err, null);\n            }\n\n            if (options.shouldSendConfirmation) {\n              sendConfirmationEmail(savedUser[options.emailFieldName], null);\n            }\n            return callback(null, user);\n          });\n        });\n\n\n        // temp user is not found (i.e. user accessed URL after data expired, or something else...)\n      } else {\n        return callback(null, null);\n      }\n    });\n  };\n\n\n  /**\n   * Resend the verification email to the user given only their email.\n   *\n   * @func resendVerificationEmail\n   * @param {object} email - the user's email address\n   */\n  var resendVerificationEmail = function(email, callback) {\n    var query = {};\n    query[options.emailFieldName] = email;\n\n    options.tempUserModel.findOne(query, function(err, tempUser) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      // user found (i.e. user re-requested verification email before expiration)\n      if (tempUser) {\n        // generate new user token\n        tempUser[options.URLFieldName] = randtoken.generate(options.URLLength);\n        tempUser.save(function(err) {\n          if (err) {\n            return callback(err, null);\n          }\n\n          sendVerificationEmail(getNestedValue(tempUser, options.emailFieldName), tempUser[options.URLFieldName], function(err) {\n            if (err) {\n              return callback(err, null);\n            }\n            return callback(null, true);\n          });\n        });\n\n      } else {\n        return callback(null, false);\n      }\n    });\n  };\n\n\n  return {\n    options: options,\n    configure: configure,\n    generateTempUserModel: generateTempUserModel,\n    createTempUser: createTempUser,\n    confirmTempUser: confirmTempUser,\n    resendVerificationEmail: resendVerificationEmail,\n    sendConfirmationEmail: sendConfirmationEmail,\n    sendVerificationEmail: sendVerificationEmail,\n  };\n};\n"}